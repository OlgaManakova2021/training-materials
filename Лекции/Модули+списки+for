В программировании стало общепринятой практикой использовать так называемые модули, пакеты и библиотеки. Каждый модуль содержит коллекцию функций и классов, предназначенных для решения задач из определенной области. Так в модуле math языка Python содержатся математические функции, модуль random позволяет генерировать псевдослучайные числа, в модуле datetime содержатся классы для работы с датами и временем, модуль sys предоставляет доступ к системным переменным и т. д.
Часть модулей собрана в так называемую стандартную библиотеку, которая поставляется вместе с установочным пакетом. Существуют сторонние библиотеки. Они скачиваются и устанавливаются отдельно.
Для доступа к функционалу модуля, его надо импортировать в программу. После импорта интерпретатор "знает" о существовании дополнительных классов и функций и позволяет ими пользоваться.
В Питоне импорт осуществляется командой import. При этом существует несколько способов импорта. 

Раздаточный материал № 48

>>> import math

В глобальной области видимости появилось имя math. В программе завелся объект math, относящийся к классу module. Если до импорта упомянуть имя math, то возникла бы ошибка NameError. 
Чтобы увидеть перечень функций, входящих в этот модуль можно воспользоваться встроенной в Python функцией dir(), передав ей в качестве аргумента имя модуля

Раздаточный материал № 49

>>> dir(math)
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh',
'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh',
'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor',
'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite',
'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf',
'nan', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']

Имена без двойных подчеркиваний – имена функций и констант, включенных в модуль math. Чтобы вызвать функцию из модуля, надо впереди написать имя модуля, поставить точку, далее указать имя функции, после чего в скобках передать аргументы, если они требуются. Для обращения к константе скобки не нужны.

Раздаточный материал № 50

>>> math.pow(2, 2)
4.0
>>> math.pi
3.141592653589793

Что-бы узнать, что делает та или иная функция

Раздаточный материал № 51

>>> help(math.gcd)

Второй способ импорта – это когда импортируется не сам модуль, а только необходимые функции из него. В таком случае при их вызове не надо перед именем функции указывать имя модуля.

Раздаточный материал № 52

>>> from math import gcd, sqrt, hypot

Чтобы импортировать сразу все функции из модуля

Раздаточный материал № 53

>>> from math import *

Недостаток импорта через from - в программе уже может быть идентификатор с таким же именем, как имя одной из импортируемых функций или констант. Ошибки не будет, но одно из них окажется "затерто":

Раздаточный материал № 54

>>> pi = 3.14
>>> from math import pi
>>> pi
3.141592653589793

Можно изменить имя идентификатора из модуля на какое угодно (если это целесообразно, например, для сокращения имени модуля)

Раздаточный материал № 55

>>> from math import pi as P
>>> P
3.141592653589793
>>> pi
3.14

Раздаточный материал № 56 (справочно) 
Модуль Math

math.ceil(X) – округление до ближайшего большего числа.
math.copysign(X, Y) - возвращает число, имеющее модуль такой же, как и у числа X, а знак - как у числа Y.
math.fabs(X) - модуль X.
math.factorial(X) - факториал числа X.
math.floor(X) - округление вниз.
math.fmod(X, Y) - остаток от деления X на Y.
math.frexp(X) - возвращает мантиссу и экспоненту числа.
math.ldexp(X, I) - X * 2i. Функция, обратная функции math.frexp().
math.fsum(последовательность) - сумма всех членов последовательности. Эквивалент встроенной функции sum(), но math.fsum() более точна для чисел с плавающей точкой.
math.isfinite(X) - является ли X числом.
math.isinf(X) - является ли X бесконечностью.
math.isnan(X) - является ли X NaN (Not a Number - не число).
math.modf(X) - возвращает дробную и целую часть числа X. Оба числа имеют тот же знак, что и X.
math.trunc(X) - усекает значение X до целого.
math.exp(X) - eX.
math.expm1(X) - eX - 1. При X → 0 точнее, чем math.exp(X)-1.
math.log(X, [base]) - логарифм X по основанию base. Если base не указан, вычисляется натуральный логарифм.
math.log1p(X) - натуральный логарифм (1 + X). При X → 0 точнее, чем math.log(1+X).
math.log10(X) - логарифм X по основанию 10.
math.log2(X) - логарифм X по основанию 2. Новое в Python 3.3.
math.pow(X, Y) - XY.
math.sqrt(X) - квадратный корень из X.
math.acos(X) - арккосинус X. В радианах.
math.asin(X) - арксинус X. В радианах.
math.atan(X) - арктангенс X. В радианах.
math.atan2(Y, X) - арктангенс Y/X. В радианах. С учетом четверти, в которой находится точка (X, Y).
math.cos(X) - косинус X (X указывается в радианах).
math.sin(X) - синус X (X указывается в радианах).
math.tan(X) - тангенс X (X указывается в радианах).
math.hypot(X, Y) - вычисляет гипотенузу треугольника с катетами X и Y (math.sqrt(x * x + y * y)).
math.degrees(X) - конвертирует радианы в градусы.
math.radians(X) - конвертирует градусы в радианы.
math.cosh(X) - вычисляет гиперболический косинус.
math.sinh(X) - вычисляет гиперболический синус.
math.tanh(X) - вычисляет гиперболический тангенс.
math.acosh(X) - вычисляет обратный гиперболический косинус.
math.asinh(X) - вычисляет обратный гиперболический синус.
math.atanh(X) - вычисляет обратный гиперболический тангенс.
math.erf(X) - функция ошибок.
math.erfc(X) - дополнительная функция ошибок (1 - math.erf(X)).
math.gamma(X) - гамма-функция X.
math.lgamma(X) - натуральный логарифм гамма-функции X.
math.pi - pi = 3,1415926...
math.e - e = 2,718281...

Генератор псевдослучайных чисел – random

В состав стандартной библиотеки языка Python входит модуль random. Он содержит множество функций, связанных с эмуляцией случайности (например, "перемешивание" элементов последовательности, а не только функции генерации псевдослучайных чисел).
Чтобы обращаться к функциям, надо импортировать модуль random или импортировать отдельные функции из него

Раздаточный материал № 57

>>> import random
>>> from random import random, randrange, randint

Функция randint() всегда принимает только два аргумента – пределы целочисленного диапазона, из которого выбирается любое число. Обе границы включаются в диапазон. Первый аргумент всегда должен быть меньше или равен второму.

Раздаточный материал № 58

>>> random.randint(0, 10)
10
или (если импортировались отдельные функции):
>>> randint(-100, 200)
-10

Функция randrange() может принимать до трех аргументов. Если указан только один, то она возвращает случайное число от 0 до указанного аргумента. Причем сам аргумент в диапазон не входит. Если передается два аргумента, то она работает аналогично randint() за одним исключением - верхняя граница не входит в диапазон. Если передается три аргумента, то первые два – это границы, а третий – шаг. 

Раздаточный материал № 59

randrange(10, 20, 3)   → "случайное" число будет выбираться из чисел 10, 13, 16, 19

Функция random() – "случайные" вещественные числа, не принимает никаких аргументов и возвращает число от 0 до 1, не включая 1.

Раздаточный материал № 60

>>> random.random()
0.17855729241927576
или
>>> random()
0.025328854415995194

Для округления результата

>>> round(random.random(), 3)
0.629

Чтобы получать случайные вещественные числа в иных пределах
Раздаточный материал № 61

>>> random.random() * 10
2.510618091637596
>>> random.random() * (1 + 1) - 1
-0.673382618351051




Списки (List). 

Список в Python – это встроенный тип (класс) составных данных. Является изменяемой последовательностью произвольных элементов, т.е. иметь переменную длину. Список может содержать элементы только одного типа или разных – числа, строки и другие списки. Элементы в списке упорядочены, каждый элемент имеет свой индекс или номер. Индексация начинается с нуля. Список определятся квадратными скобками. Для получения доступа к элементу списка – указывается его имя. Существует индексация с конца. Она начинается с -1: a[-1]. Очистить список можно просто заново его проинициализировав.
Список можно рассматривать как одномерный массив, хотя в базовом Пайтоне такой структуры данных нет, она подключается из модуля numpy.
Создать список можно простым перечислением

Раздаточный материал № 62

>>> a = [12, 3.85, "black", -4]
>>> a
[12, 3.85, 'black', -4]

Чтобы извлечь конкретный элемент, надо после имени списка указать в квадратных скобках индекс необходимого элемента

Раздаточный материал № 63

>>> a[0]
12
>>> a[3]
-4

Часто требуется извлечь не один элемент, а так называемый срез – часть списка. В этом случае указывается индекс первого элемента среза и индекс следующего за последним элементом среза

Раздаточный материал № 64
>>> a[0:2]
[12, 3.85]

Для извлечения среза, включающего в себя последний элемент

Раздаточный материал № 65

>>> a[:3]
[12, 3.85, 'black']
>>> a[2:]
['black', -4]
>>> a[:]
[12, 3.85, 'black', -4]

Для изменения значения элемента списка
Раздаточный материал № 66

>>> a[1] = 4
>>> a
[12, 4, 'black', -4]

Создание копии списка 
Раздаточный материал № 67
>>> a = [1, 3, 5, 7] 
>>> b = a[:] 
>>> print(a) 
[1, 3, 5, 7] 
>>> print(b) 
[1, 3, 5, 7]

Изменять списки и выполнять работу с ними можно с помощью специальных встроенных методов списка
Раздаточный материал № 68 (справочно)
list.append(значение) – добавление нового значения в конец списка.
list.insert(позиция, значение) -  добавление нового значения в указанную позицию списка.
list.remove(значение) – удаляет указанное значение из списка, не привязываясь к индексу.
list.pop() – удаляет последний элемент списка и возвращает значение.
list.pop(индекс) – удаляет элемент списка с указанным индексом и возвращает значение.
del a[индекс] - удаляет элемент списка с указанным индексом.
del a[индекс : индекс] - удаляет срез элементов списка с указанными индексами.
list.clear() – удаляет все элементы из списка.

list.index - Возвращает индекс элемента
list.count(x) Возвращает количество вхождений элемента x в список
list.sort(key=None, reverse=False) - сортирует элементы в списке по возрастанию. Для сортировки в обратном порядке используйте флаг reverse=True. 
ist.reverse() - изменяет порядок расположения элементов в списке на обратный.
list.copy() - возвращает копию списка.


Цикл For

Цикл for предназначен для перебора элементов структур данных и некоторых других объектов. Сам определит конец структуры, не требует счетчика.
Цикл for является универсальным итератором в Python: он может проходить по элементам в любой упорядоченной последовательности или в другом итерируемом объекте. 
Объект считается итерируемым, если он является либо физически сохраненной последовательностью в памяти, либо объектом, который генерирует по одному элементу за раз в контексте итерационной операции — своего рода “виртуальной” последовательностью. 
Оператор for работает на строках, списках, кортежах и прочих встроенных итерируемых объектах, а также на новых объектах, определяемых пользователем. 
Цикл for языка Python начинается со строки заголовка, где указывается цель (или цели) присваивания наряду с объектом, по которому нужно совершить проход. После заголовка находится блок операторов (обычно с отступами), который необходимо повторять:

Раздаточный материал № 69
for цель in объект:		# Присваивает цели элементы объекта
    операторы		# Повторяемое тело цикла: использует цель
else:				# Необязательная часть else
    операторы		# Если не встречался оператор break

spisok = [10, 40, 20, 30]
>>> for element in spisok:
      print(element + 2)
12
42
22
32

Когда Python запускает цикл for, он присваивает цели элементы итерируемого объекта по очереди и выполняет для каждого тело цикла. Внутри тела цикла цель присваивания обычно используется для ссылки на текущий элемент в последовательности, как если бы цель была курсором, проходящим через последовательность.
Имя, применяемое как цель присваивания в строке заголовка for, обычно является (возможно, новой) переменной внутри области видимости, где находится оператор for. Имя можно изменять внутри тела цикла, но оно будет автоматически устанавливаться в следующий элемент последовательности, когда управление снова возвратится в начало цикла. После цикла эта переменная, как правило, по-прежнему ссылается на последний посещенный элемент, которым будет последний элемент в последовательности, если только не произошел выход из цикла посредством оператора break.
Оператор for также поддерживает необязательный блок else, который работает точно как в цикле while — он выполняется, если выход из цикла осуществляется без помощи оператора break (т.е. когда были посещены все элементы последовательности). Операторы break и continue в цикле for также работают аналогично циклу while. Полный формат цикла for может быть описан следующим образом:

Раздаточный материал № 70

for цель in объект: 				#Присваивает цели элементы объекта
    операторы if проверка: break	#Выход из цикла с пропуском else
    if проверка: continue 			#Переход в начало цикла
else:
операторы				#Если не встречался оператор break

Вопросы:
	Понятие стандартной библиотеки.
	Порядок работы с модулем в Phyton.
	Команды импорта модуля и перечня функций модуля.
	Как импортировать из модуля только необходимые функции и все функции.
	Недостаток импорта через from.
	Назначение и порядок работы с модулем random.
	Описать функцию randint().
	Описать функцию randrange().
	Описать функцию random().
	Понятие списка.
	Доступ к элементу списка.
	Создание списка, 
	Как задать срез списка.
	Как изменить значение элемента списка.
	Как создать копию списка.
	Назначение и возможности цикла for.
	Формат цикла for.
	Принцип работы цикла for.
	Понятие итерируемого объекта.


